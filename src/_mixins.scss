@use 'sass:map';
@use "collections/palettes/monochrome";

//
//
// 1 / Palette Transforms
//
//

$contrast-using-dark-text:monochrome.$base-black !default;
$contrast-using-light-text:monochrome.$base-white !default;

$light-nuance-lighten-by:11% !default;
$light-nuance-desaturate-by:9% !default;
$dark-nuance-darken-by:11% !default;
$dark-nuance-saturate-by:9% !default;
$treshold-contrast-nuance:.69;

@function dark-nuance(
  $color,
  $darken-by:$dark-nuance-darken-by,
  $saturate-by:$dark-nuance-saturate-by,
) {
  @return saturate(darken($color, $darken-by), $saturate-by);
}

@function light-nuance(
  $color,
  $lighten-by:$light-nuance-lighten-by,
  $desaturate-by:$light-nuance-desaturate-by,
) {
  @return desaturate(lighten($color, $lighten-by), $desaturate-by);
}

@function contrast-nuance($color, $dark-text:$contrast-using-dark-text, $light-text:$contrast-using-light-text) {
  $count:red($color) + green($color) + blue($color);
  $max:256 * 3 * $treshold-contrast-nuance;
  @if $count < $max {
    @return $light-text;
  }
  @else {
    @return $dark-text;
  }
}


//
//
// 2 / Setters and Getters factories
//
//


// Change how the setters and getters are called
$prefix-hover:"h" !default;
//$prefixes-setters:"x", "y", "z" !default;
$prefixes-setters:"x", "y" !default;
//$registry-length:5 !default;

$getter-background:"b-" !default;
$getter-color-stroke:"c-" !default;
$getter-border:"d-" !default;
$getter-fill:"e-" !default;

/*! from alphabet-scss */
@mixin getter-factory($prefix,$var-name,$properties) {
  .#{$prefix}#{$var-name} {
    @each $property in $properties {
      #{$property}: var(--#{$var-name});
    }
  }
}

$default-colorscheme-names: (
  "shade1": "",
  "shade2": "dark",
  "shade3": "light",
  "shade4": "on"
);

@mixin define-variables($array, $colorscheme-names: $default-colorscheme-names) {
  @each $name, $colorlist in $array {
    // $base:nth($colorlist, 1);
    // $dark:nth($colorlist, 2);
    // $light:nth($colorlist, 3);
    // $contrast:nth($colorlist, 4);
    $shade1:nth($colorlist, 1);
    $shade2:nth($colorlist, 2);
    $shade3:nth($colorlist, 3);
    $shade4:nth($colorlist, 4);

    --#{$name}: #{$shade1};
    @if ($shade2) {
      --#{map.get($colorscheme-names, "shade2")}-#{$name}: #{$shade2};
    }
    @else {
      --#{map.get($colorscheme-names, "shade2")}-#{$name}: #{dark-nuance($shade1)};
    }
    @if (shade3) {
      --#{map.get($colorscheme-names, "shade3")}-#{$name}: #{shade3};
    }
    @else {
      --#{map.get($colorscheme-names, "shade3")}-#{$name}: #{light-nuance($shade1)};
    }
    @if ($shade4) {
      --#{map.get($colorscheme-names, "shade4")}-#{$name}: #{$shade4};
    }
    @else {
      --#{map.get($colorscheme-names, "shade4")}-#{$name}: #{contrast-nuance($shade1)};
    }
  }
}

@mixin define-theme($array, $theme-name, $default:false, $colorscheme-names: $default-colorscheme-names) {
  @if $default == true {
    :root,
    .#{$theme-name} {
      @include define-variables($array, $colorscheme-names);
    }
  }
  @else {
    .#{$theme-name} {
      @include define-variables($array, $colorscheme-names);
    }
  }
}

@mixin define-theme-extras($array, $theme-name) {
  .#{$theme-name} {
    @each $key, $value in $array {
      --#{$key}: #{$value};
    }
  }
}


//
//Setters
//
//


@mixin setters-from-map($array, $colorscheme-names: $default-colorscheme-names) {
  @each $name, $colorlist in $array {
    @each $prefix in $prefixes-setters {
      .#{$prefix}-#{$name},
      .#{$prefix}#{$prefix-hover}-#{$name}:focus,
      .#{$prefix}#{$prefix-hover}-#{$name}:hover {
        --#{$prefix}: var(--#{$name});
        --#{map.get($colorscheme-names, "shade2")}-#{$prefix}: var(--#{map.get($colorscheme-names, "shade2")}-#{$name});
        --#{map.get($colorscheme-names, "shade3")}-#{$prefix}: var(--#{map.get($colorscheme-names, "shade3")}-#{$name});
        --#{map.get($colorscheme-names, "shade4")}-#{$prefix}: var(--#{map.get($colorscheme-names, "shade4")}-#{$name});
      }
    }
  }
}

//
//Getters
//
//
//

@mixin getters($colorscheme-names: $default-colorscheme-names) {
  // $variants:"","light","dark","on";
  $variants: $colorscheme-names;
  @each $register in $prefixes-setters {
    @each $name, $variant in $variants {
      @if $variant == "" {
        @include getter-factory($getter-background,$register,("background"));
        @include getter-factory($getter-color-stroke, $register,("color", "stroke"));
        @include getter-factory($getter-border,$register,("border-color"));
        @include getter-factory($getter-fill,$register,("fill"));
      }
      @else {
        $v:"#{$variant}-#{$register}";//"

        @include getter-factory($getter-background,$v,("background"));
        @include getter-factory($getter-color-stroke, $v,("color", "stroke"));
        @include getter-factory($getter-fill,$v,("fill"));
      }
    }
  }
}

